/-
Copyright (c) 2020 Heather Macbeth. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Heather Macbeth
-/
import analysis.normed_space.hahn_banach

noncomputable theory

section top_dual
variables (ùïú : Type*) [nondiscrete_normed_field ùïú]
variables (E : Type*) [normed_group E] [normed_space ùïú E]

@[derive [normed_group, normed_space ùïú]] def top_dual := E ‚ÜíL[ùïú] ùïú

instance : has_coe_to_fun (top_dual ùïú E) := ‚ü®_, Œª f, f.to_fun‚ü©

def inclusion_in_double_dual (x : E) : (top_dual ùïú (top_dual ùïú E)) :=
linear_map.mk_continuous
  { to_fun := Œª f, f x,
    add    := by simp,
    smul   := by simp }
  ‚à•x‚à•
  (Œª f, by { rw mul_comm, exact f.le_op_norm x } )

@[simp] lemma dual_def (x : E) (f : top_dual ùïú E) :
  ((inclusion_in_double_dual ùïú E) x) f = f x := rfl

lemma double_dual_bound (x : E) : ‚à•(inclusion_in_double_dual ùïú E) x‚à• ‚â§ ‚à•x‚à• :=
begin
  apply continuous_linear_map.op_norm_le_bound, simp,
  intros f, rw mul_comm, exact f.le_op_norm x,
end

def inclusion_in_double_dual_map : E ‚ÜíL[ùïú] (top_dual ùïú (top_dual ùïú E)) :=
linear_map.mk_continuous
  { to_fun := Œª (x : E), (inclusion_in_double_dual ùïú E) x,
    add    := Œª x y, by { ext, simp },
    smul   := Œª (c : ùïú) x, by { ext, simp } }
  1
  (Œª x, by { simp, apply double_dual_bound } )

end top_dual

section top_dual_real
variables (E : Type*) [normed_group E] [normed_space ‚Ñù E]

lemma inclusion_in_double_dual_isometry (x : E) (h : vector_space.dim ‚Ñù E > 0) :
  ‚à•inclusion_in_double_dual_map ‚Ñù E x‚à• = ‚à•x‚à• :=
begin
  refine le_antisymm_iff.mpr ‚ü®double_dual_bound ‚Ñù E x, _‚ü©,
  rw continuous_linear_map.norm_def,
  apply real.lb_le_Inf _ continuous_linear_map.bounds_nonempty,
  intros c, simp, intros h‚ÇÅ h‚ÇÇ,
  cases exists_dual_vector' h x with f hf,
  calc ‚à•x‚à• = f x : hf.2.symm
  ... ‚â§ ‚à•f x‚à• : le_max_left (f x) (-f x)
  ... ‚â§ c * ‚à•f‚à• : h‚ÇÇ f
  ... = c : by rw [ hf.1, mul_one ],
end

end top_dual_real
